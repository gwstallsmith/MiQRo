

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bootstrap Navbar with TV-shaped Outer Container</title>
  <!-- Include the modal CSS -->
  <link rel="stylesheet" href="modal.css">
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <style>
    /* Custom CSS for TV-shaped outer container */
    html, body {
            margin: 0;
            padding: 0;
            font-family: Arial, sans-serif;
            background-color: #fff;
        }

    .tv-container {
      position: relative;
      width: 100%; /* Cover entire width of the page */
      height: 100vh; /* Cover entire height of the viewport */
      background-color: #333; /* Dark grey background */
      overflow: hidden;
      border-radius: 0; /* Square outer corners */
    }

    .tv-screen {
      position: absolute;
      top: 20px;
      left: 5px;
      right: 5px;
      bottom: 20px;
      padding-left: 10px;
      padding-right: 10px;
      background-color: #fff; /* White background for inner content */
      border-radius: 20px; /* Rounded corners for inner content */
      overflow: hidden;
    }

    /* White text for navbar items */
    .navbar-nav .nav-link {
      color: #333;
    }

    /* Padding for tab content */
    .tab-content .tab-pane .content-wrapper {
      padding-top: 10px; /* Top padding */
      padding-bottom: 10px; /* Bottom padding */
      padding-left: 15px; /* Left padding */
      padding-right: 15px; /* Right padding */
    }

    .container {
            align-items: stretch;
            width: 100%;
            height: 100vh;
            min-width:100%;
            position: relative;
            display: flex;
            padding: 0px;
    }
    
    .left-space {
            flex: 1.2;
            background-color:white;   /* entire height*/
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            overflow-y: auto;
            padding: 0px;
            position: relative;
    }
    .left-space .content {
            padding-top: 15px; /* Adjust padding to make space for the app bar */
            padding-left: 2.5px; /* Add left padding for the content */
            padding-right: 20px; /* Add right padding for the content */
            padding-bottom: 35px;
            background-color: white;
            height: 500px;
    }
    .right-space {
            flex: 1.8;
            background-color: #f8f9fa;
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            border-bottom-left-radius: 10px;
            border-bottom-right-radius: 10px;
            overflow-y: scroll;
            position: relative;
    }

    .right-space .app-bar {
            position: sticky;
            top: 0;
            background-color: #f8f9fa;
            border-bottom: 1px solid #F5F5F5; /* Grey bottom border */
            border-top-left-radius: 10px;
            border-top-right-radius: 10px;
            color: black;
            padding-top: 12.5px;
            padding-left: 20px;
            padding-right: 20px;
            padding-bottom: 5px;
            z-index: 1;
        }
    
    .right-space .content {
            padding-top: 0px; /* Adjust padding to make space for the app bar */
            padding-left: 12.5px; /* Add left padding for the content */
            padding-right: 12.5px; /* Add right padding for the content */
            background-color: #f8f9fa;
    }
    .divider {
            flex: 0 0 25px;
            background-color: transparent;
    }
    .content-wrapper {
          padding: 0px;
    }
    .row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-left: 5px;
        padding-right: 5px;
    }

    .fade-in {
    opacity: 0;
    animation: fadeInAnimation 1s ease forwards;
    }

    .right-space .content {
      position: relative;
      height: calc(100% - 240px); /* Set the height */
      width: 100%; /* Set the width */
    }

    .right-space .content > * {
      position: absolute;
      top: 60%; /* Align the top edge of the element to the middle of the container */
      left: 50%; /* Align the left edge of the element to the middle of the container */
      transform: translate(-50%, -50%); /* Move the element up and left by 50% of its own width and height */
    }

    .form-group label {
        font-weight: 600; /* Adjust the font weight as needed */
        color: #222;
    }


    @keyframes fadeInAnimation {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }


  </style>

</head>

<body>

  <script>
    // Function to parse query parameters from the URL
    function getQueryParam(name) {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get(name);
    }
  
    // Get the selected lab ID from the query parameter
    const labId = getQueryParam('labId');
  
    // Display the selected lab ID on the page
    const labIdDisplay = document.getElementById('labIdDisplay');
    if (labIdDisplay) {
        labIdDisplay.textContent = 'Selected Lab ID: ' + labId;
    }
  
  </script>

<div class="tv-container">
  <div class="tv-screen">
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
      <a class="navbar-brand font-weight-bold" href="#">MiQR</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link home" href="#home">Home <span class="sr-only">(current)</span></a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Labs</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="#">Profile</a>
          </li>
          <!-- Add more nav items as needed -->
        </ul>
      </div>
    </nav>

    <!-- Tab contents -->
    <div class="tab-content">
      <!-- Home Tab Content -->
      <div class="tab-pane fade show active" id="home" role="tabpanel" aria-labelledby="home-tab">
        <div class="content-wrapper">

          <div class="spacer" style="width: 100%; height: 25px;"></div>   <!-- Fetch Page -->
          <h2 class="title" style="font-weight: bold;">Upload QR Code</h2>
          <div class="spacer" style="width: 100%; height: 15px;"></div>
          
          <div class="container">
            <div class="left-space">
                <div class="content">

                    <div style="text-align: center;">

                        <img src="data:image/svg+xml;base64,{{ img }}" width="400" height="400" style="border-radius: 10px; border: 2px solid darkgray;">

                        <div class="spacer" style="width: 100%; height: 15px;"></div>

                        <form method="POST" enctype="multipart/form-data">
                            <input type="file" name="file" accept="image/*">
                            <input type="submit" value="Upload">
                        </form>

                    </div>  
                    
                </div>
            </div>
            <div class="divider"></div>
            <div class="right-space" style="height: calc(100% - 240px);">
                <div class="app-bar">
                    <div class="row">
                        <h3 class="title" style="font-weight: bold;" id="microQR_ID"></h3>
                      
                        <!-- Button trigger define modal -->

                        <button id="defineButton" type="button" class="btn btn-primary" data-toggle="modal" data-target="#defineModal">
                          Define
                      </button>

                      <script>
                        var created = false;

                        // Function to update button style and text based on 'created' value
                        function updateButtonStyle() {
                            const defineButton = document.getElementById('defineButton');
                    
                            // Update button class and text based on 'created' value
                            if (created) {
                                // If data has been created, set button class to 'btn btn-success' and text to 'Success'
                                defineButton.classList.remove('btn-primary');
                                defineButton.classList.add('btn-success');
                                defineButton.textContent = 'Uploaded';
                                defineButton.disabled = true; // Disable the button
                                createDisplay.innerHTML = "You can find this QR upload in <b>" + text3 + "</b> in " + text2;
                            } else {
                                // If data has not been created, set button class to 'btn btn-primary' and text to 'Define'
                                defineButton.classList.remove('btn-success');
                                defineButton.classList.add('btn-primary');
                                defineButton.textContent = 'Define';
                                defineButton.disabled = false; // Enable the button
                            }
                        }
                    
                        // Call the function initially to set button style and text
                        updateButtonStyle();
                    </script>
                      
                    </div>
                    
                </div>

                <div class="content" style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
                  <div class="spacer" style="width: 100%; height: 50px;"></div>

                  <div class="column">
                    <p id="createDisplay" class="fade-in" style="font-size: 12pt; text-align: center;"></p>

                    <div class="spacer" style="width: 100%; height: 40px;"></div>

                    <p style="text-align: center; font-family: monospace; font-size: 10pt;">
                      Tip: When defining data for a QR code, consider using concise and relevant information. QR codes are most effective when they provide valuable information to you quickly and easily.
                    </p>

                    <!-- <p id="demo"></p> -->

                    <script>
                      // Retrieve data from sessionStorage and set the form fields
                      var text2 = sessionStorage.getItem("labValue");
                      var text3 = sessionStorage.getItem("grpValue");
                  
                      // Display the value in an element with the ID "formDataDisplay"
                      const createDisplay = document.getElementById("createDisplay");
                  
                      if (text2 && text3) {
                          createDisplay.innerHTML = "This QR upload will go into <b>" + text3 + "</b> in " + text2;
                          
                      } else {
                          createDisplay.innerText = "No text found";
                      }
                  
                    </script>

                  </div>
              </div>

              
            </div>
        </div>

          <!-- Add more content here if needed -->


        </div>
      </div>

      <!-- Add more tab contents here -->
    </div>
  </div>
</div>



<!-- Modal -->
<div class="modal fade" id="defineModal" tabindex="-1" role="dialog" aria-labelledby="defineModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" style="font-weight: bold; font-size: 19pt;" id="defineModalLabel">Define QR data</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body"> <!-- Set max-height and enable overflow scrolling -->

    
        <form id="dynamic-modal-form">
          <div id="dynamic-form-fields"></div>
        </form>
       
      </div>

      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="uploadData()">Upload</button>
        
      </div>
    </div>
  </div>
</div>

<script>

  // It seems, if you set and don't put in HTML, code beneath won't run
  const microQR_ID = "Micro_QR_ID (a var)";
  document.getElementById("microQR_ID").innerHTML = microQR_ID;

  // List of field names
  // I NEED A FUNCTION TO DISPLAY FETCHED DATA, the original variable

  const simNewList = [
    { labelName: 'Sample Name', input: '' },
    { labelName: 'External location', input: '' },
    { labelName: 'Tail width',input: '' },
    { labelName: 'Tail lenght',input: '' },
    { labelName: 'Created by', input: '' }
  ];
  

  function generateDynamicFormFields(listName) {
      const dynamicFormFieldsContainer = document.getElementById('dynamic-form-fields');
      dynamicFormFieldsContainer.innerHTML = '';

      listName.forEach(item => {
          const fieldId = item.labelName.replace(/\s+/g, '_').toLowerCase(); // Use item.labelName here
          const labelName = item.labelName; // Store labelName

          const formGroup = document.createElement('div');
          formGroup.classList.add('form-group', 'row'); // Adding 'row' class

          const labelColumn = document.createElement('div');
          labelColumn.classList.add('col-md-3'); // Adjust width as needed
          const label = document.createElement('label');
          label.setAttribute('for', labelName); // Use labelName as for attribute
          label.textContent = labelName;
          label.style.fontWeight = 'bold';
          labelColumn.appendChild(label);

          const inputColumn = document.createElement('div');
          inputColumn.classList.add('col-md-9'); // Adjust width as needed
          const input = document.createElement('input');
          input.setAttribute('type', 'text');
          input.classList.add('form-control');
          // Used labelName NOT fieldId as id attribute
          input.setAttribute('id', labelName); 
          input.setAttribute('placeholder', `Enter ${labelName}`);
          input.value = item.input; // Set input value from item.input
          inputColumn.appendChild(input);

          formGroup.appendChild(labelColumn);
          formGroup.appendChild(inputColumn);
          dynamicFormFieldsContainer.appendChild(formGroup);
      });
  }

  // Call the function initially to generate dynamic form fields
  generateDynamicFormFields(simNewList);

  // Function to handle form submission
  function uploadData() {

      // Create an object to store form data
      const formDataObject = {};

      // Retrieve all input elements within the form
      const inputElements = document.querySelectorAll('#dynamic-modal-form input');

      // Iterate over input elements and store their values in the object
      inputElements.forEach(input => {
          formDataObject[input.id] = input.value;
      });
      
      // Convert the object to JSON
      const formDataJSON = JSON.stringify(formDataObject);

      // Iterate over the object properties and update .input(value) of each list item
      Object.entries(formDataObject).forEach(([key, value]) => {
          const matchingItem = simNewList.find(item => item.labelName === key);
          if (matchingItem) {
              matchingItem.input = value;
          }
      });

      // THIS DISPLAYS UPDATED .input : update MIQR attributes with .input
      // document.getElementById("demo").innerHTML = JSON.stringify(simNewList, null, 2);

      // Trigger alert for cross-checking form data
      if (confirm('Are you set to upload the data?')) {
          // If user clicks "OK", set the variable 'created' to true
          created = true;

          // Close the modal after saving
          $('#defineModal').modal('hide');

          updateButtonStyle();
      }
  }
</script>






<!-- Bootstrap JS and jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>


</body>
</html>

